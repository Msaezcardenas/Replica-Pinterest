{"version":3,"sources":["Components/ImgPint.js","Components/Nav.js","Components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["ImgPint","props","react_default","a","createElement","className","src","url","onClick","pushClick","NavComponent","alt","class","placeholder","Component","Modal","e","target","getAttribute","href","style","fontSize","imgUrl","App","state","images","isLoading","errors","apikey","page","toShowing","fetchData","start","_this","setState","axios","get","then","arr","data","hits","concat","console","log","openModal","i","closeModal","_this2","this","catch","error","_this3","map","img","src_Components_ImgPint","key","previewURL","src_Components_Modal","Components_Nav","lib_default","overflow","dataLength","length","next","hasMore","getImage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.049e7bac.chunk.js","sourcesContent":["import React from 'react';\nimport './ImgPint.css';\n\n\n\nconst ImgPint = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"item\"> \n            <img src={props.url} onClick={() => props.pushClick(props)} /> \n            </div>\n\n        </div>\n    )\n}\n\nexport default ImgPint;\n\n\n\n","import React, { Component } from 'react';\nimport './Nav.css';\nimport './ImgPint';\n\n\n\nclass NavComponent extends Component {\n    render() {\n        return (\n            <div className=\"navbar\">\n\n                <navbar>\n                    <url>\n                        <img src=\"https://cdn.freebiesupply.com/logos/large/2x/pinterest-1-logo-png-transparent.png\" className=\"image\" alt=\"\" />\n                        <i class=\"fas fa-search\"></i>\n                        <input className=\"Search\" placeholder=\"Buscar\"></input>\n                        <a className=\"Home\">Inicio</a>\n                        <a className=\"Follow\">Siguiendo</a>\n                        <i class=\"fas fa-user-astronaut\"></i>\n                        <a className=\"Name\">MoLu</a>\n                        <i className=\"fas fa-comment-dots\"></i>\n                        <i className=\"fas fa-bell\"></i>\n                        <i className=\"fas fa-ellipsis-h\"></i>\n                    </url>\n                </navbar>\n            </div>\n        )\n\n    }\n}\n\nexport default NavComponent;","import React from 'react';\nimport './Modal.css';\n\nconst Modal = (props) =>{\n    return(\n    <div className=\"modalContainer\" onClick={(e)=>{\n        if(e.target.getAttribute(\"class\") === \"flex\"){\n            props.pushClick()\n        }\n        }}>\n        <a href=\"inicio\" className=\"inicio\"><i className='fas fa-chevron-left' style={{ fontSize: '20px'}}></i>Inicio</a>\n        <div className=\"flex\">\n            <div className=\"modal\">\n                <div className=\"headerModal\">\n                    <a href=\"#\" className=\"btn-guardar\"><i className='fas fa-thumbtack' style={{ fontSize: '15px'}}></i>Guardar</a>\n                    <a href=\"#\" className=\"btn-enviar\"><i className='fas fa-upload' style={{ fontSize: '15px'}}></i>Enviar</a>\n                </div>\n                <div className=\"bodyModal\">\n                    <img className=\"imgModal\" src={props.imgUrl} alt=\"\"/>\n                </div>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport NavComponent from './Components/Nav';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Modal from './Components/Modal';\nimport ImgPint from './Components/ImgPint';\nimport './Components/ImgPint'\n\n\nclass App extends Component {\n  state = {\n\n    images: [],\n    isLoading: true,\n    errors: null,\n    apikey: '12135320-1034cd4873eda400df781a37d',\n    page: 20,\n    toShowing: false,\n  };\n\n  componentDidMount() {\n\n    axios\n     .get(\"https://pixabay.com/api/?key=12135320-1034cd4873eda400df781a37d&q=all&image_type=photo\")\n\n\n      .then(images => {\n        this.setState({\n          images: images.data.hits,\n          isLoading: false\n        });\n      })\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n  fetchData = () => {\n    let start = this.state.page + 20;\n    this.setState({\n      page: start\n\n    })\n\n    axios\n      .get(\"https://pixabay.com/api/?key=12135320-1034cd4873eda400df781a37d&q=all&image_type=photo&page=\" + (this.state.page / 20) + \"&per_page=20\")\n\n      .then(images => {\n        let arr = images.data.hits\n        this.setState({\n          images: arr.concat(this.state.images),\n          isLoading: false\n        });\n        console.log(arr.concat(this.state.images));\n      })\n  }\n\n  openModal = (i) => {\n    this.setState({\n      toShowing: i.url\n    });\n  }\n\n  closeModal = () => {\n    this.setState({\n      toShowing: false\n    });\n  }\n\n  getImage(){\n  const showImage = this.state.images.map((img, i) =>{\n    return (\n      <ImgPint\n      key={i}\n      pushClick={this.openModal}\n      url={img.previewURL}>\n      </ImgPint>\n    )\n  })\n  return showImage;\n  }\n\n\n  render() {\n    return (\n      <div>\n      {this.state.toShowing && <Modal pushClick={this.closeModal} imgUrl={this.state.toShowing}></Modal>}\n\n        <NavComponent />\n    \n        <div className=\"masonry\">\n        <InfiniteScroll \n        style={{overflow:'none'}}\n          dataLength={this.state.images.length}\n          next={this.fetchData}\n          hasMore={true}\n        >{this.state.images && this.getImage()}\n        </InfiniteScroll>\n      </div>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}